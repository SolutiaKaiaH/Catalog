Create container
Run
    - go to debug and press start debugging
    - or press F5
Trust the certificate
    - dotnet dev-certs https --trust 
Build
    - cntrl + shift + b

Docker container
    - check if running
        - docker ps 
    - stop the container        
        - docker stop mongo 
    - check our containers
        - docker volume ls 
    - remove our container
        - docker volume rm mongodbdata
    - create container  
        - docker run -d --rm --name mongo -p 27017:27017 -v mongodbdata:/data/db -e MONGO_INITTDB_ROOT_USERNAME=mongoadmin -e MONGO_INITDB_ROOT_PASSWORD=Pass#word1 mongo
        
Controller handles requests from the client 

204 response from swagger
    - something is not as expected 
    - the problem was that every time we called our ItemsController
        we were creating a new List items with all new
        generated .NewGuid Id's

Dependency Injection
    - a class that wants to use another class   
        - this class is a dependancy (depends on that class)
    - instead of having our Controller create a new instance
        we want to receive a repository into the controller (inject)
        and use this. 
    - Why?
        - by having our code depend upon abstractions we are decoupling
            implementations from each other
        - Code is cleaner, easier to modify and easier to requests
    - HOW TO CONSTRUCT
        - using an IServiceProvider
        - register each dependancy into the provider and it will
            resolve any dependancies needed and construct and
            inject dependcncies
    - REPOSITORY IMPLEMENTS INTERFACE

Data Transfer Object
    - Client and our Service

CreateItem
    - you need to make sure you take a name
        - data annotations! 
        - otherwise you will get a null
        -[Required][Range]

Adding Persistence
    - Someone reaches in to grab items
    - they hit the ItemsController  
    - ItemController hits InMemItemsRepository 

    - If API stops we want to keep items alive 
        - Option one is to use files
        - Option two is to use a DataBase
            - Relational
            - No-SQL
                - MongoDB

Postman
    - adding our host
    - click new, then put in whatever the terminal is spitting out
        for the url https://localhost:5001
    - then look at where they are stored
        - /items 

MongoDB Client
    - used to interface with MongoDB (interact)
    - we need to inject that dependency to use it in our repository 
    -  dotnet add package MongoDB.Driver

Docker Image 
    - A standalone package of software that includes everything 
        needed to run an application 
     - When we run we get a docker container

Post in Postman
    - go to a post tab
    - go to body 
    - raw, and JSON

Asynchronous programming
    - when you don't wait for your laundry to be done to start folding
    - cooking breakfast model 
    - Async all the way     
        - async-> Controller async-> repository async-> database

Secrets Management 
    - using a user name and password with the rest api and database 

Set up secrets 
    - dotnet user-secrets init 
        - will create a space in catalog.csproj
    - create new secrets      
        - dotnet user-secrets set MongoDbSettings:Password __________
        